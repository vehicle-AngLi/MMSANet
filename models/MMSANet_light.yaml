# Parameters
nc: 5  # number of classes
depth_multiple: 0.33  # model depth multiple 控制模型的深度用来控制模型的深度，仅在number≠1时启用。 如第一个c3层（c3具体是什么后续介绍）的参数设置为[-1, 3, c3, [128]]，其中number=3，表示在v5s中含有1个c3（3*0.33）
width_multiple: 0.5  # layer channel multiple  用来控制模型的宽度，主要作用于args中的ch_out。如第一个conv层，ch_out=64，那么在v5s实际运算过程中，会将卷积过程中的卷积核设为64x0.5，所以会输出32通道的特征图。
#通过这两个参数可以不同的模型设计

#边界框的设置
anchors:
  - [6,10, 16,30, 33,23]  # P3/8
  - [30,61, 62,45, 59,119]  # P4/16
  - [116,90, 156,198, 373,326]  # P5/32

# YOLOv5 v6.0 backbone
backbone:
  # [from, number, module, args]
  #from:当前模块输入来自那一层的输出，-1代表从上一层获得
  #number: 代表本模块重复的次数
  #model：表示网络模块的名称，具体细节可以在./models/common.py查看，如conv、c3、sppf都是已经在common中定义好的模块
  #args：表示向不同模块内传递的参数
 # 0-P1/2 #64代表通道数，3表示3*3的卷积核，2代表步长为2,2表示分两组卷积
  # [from, number, module, args]
  [[-1, 1, Focus, [64, 3]],  # 0-P1/2  640*640*64
   [-1, 1, Conv, [128, 3, 2]],  # 1-P2/4  320*320*128
   [-1, 3, C3, [128]],  #320*320*128
   [-1, 1, Conv, [256, 3, 2]],  # 3-P3/8  160*160*256
   [-1, 9, C3, [256]],  #160*160*256
   [-1, 1, Conv, [512, 3, 2]],  # 5-P4/16  80*80*512
   [-1, 9, C3, [512]],  #80*80*512
   [-1, 1, Conv, [1024, 3, 2]],  # 7-P5/32  40*40*1024
   [-1, 1, SPP, [1024, [5, 9, 13]]],
   [-1, 3, C3, [1024, False]],  # 9  40*40*1024
  ]
#input：3x640x640

#[ch_out, kernel, stride, padding]=[64, 6, 2, 2]

#故新的通道数为64x0.5=32

#根据特征图计算公式：feature_new=(feature_old-kernel+2xpadding)/stride+1可得：

#新的特征图尺寸为：feature_new=(640-6+2x2)/2+1=320

#sspf模块将经过cbs的x、一次池化后的y1、两次池化后的y2和3次池化后的self.m(y2)先进行拼接，然后再cbs提取特征。 仔细观察不难发现，虽然sspf对特征图进行了多次池化，但是特征图尺寸并未发生变化，通道数更不会变化，所以后续的4个输出能够在channel维度进行融合。这一模块的主要作用是对高层特征进行提取并融合，在融合的过程中作者多次运用最大池化，尽可能多的去提取高层次的语义特征。

# YOLOv5 v6.0 head
head:
  [[-1, 1, Conv, [512, 1, 1]],  
# 10 40*40*512
   [-1, 1, nn.Upsample, [None, 2, 'nearest']], 
# 11 80*80*512
   [[-1, 6], 1, Concat, [1]],
# 12 cat backbone P4 80*80*1024
   [-1, 3, C3, [512, False]],
# 13  80*80*512

   [-1, 1, Conv, [256, 1, 1]],
# 14  80*80*256
   [-1, 1, nn.Upsample, [None, 2, 'nearest']],
# 15  160*160*256
   [[-1, 4], 1, Concat, [1]],  
# 16 cat backbone P3  160*160*512
   [-1, 3, C3, [256, False]],  
# 17 (P3/8-small)  160*160*256

   [-1, 1, Conv, [256, 3, 2]],
# 18  80*80*256
   [[-1, 13], 1, Concat, [1]],
# 19  80*80*768 
   [-1, 3, C3, [768, False]],
# 20  80*80*768  (Mixed-medium)

   [[14, 18], 1, Concat, [1]],
# 21  80*80*512
   [-1, 3, C3, [512, False]],
# 22 (P4/16-medium)  80*80*512

   [-1, 1, Conv, [512, 3, 2]],
# 23 40*40*512
   [[-1, 10], 1, Concat, [1]],
# cat head P5  40*40*1024
   [-1, 3, C3, [1024, False]],
# 25 (P5/32-large)  40*40*1024


# Mixed Add
   [22, 1, Up_mix, [2]],
#  26  160*160*128
   [-1, 3, C3, [128, False]],
# 27 160*160*128  Con

   [22, 1, Down_mix, [512, 1, 1]],
# 28 40*40*512
   [-1, 3, C3, [512, False]],
# 29 40*40*512  Con


##
   [[-1, 25], 1, Concat, [1]],
# 30 40*40*1536
   [-1, 3, C3, [1536, False]],
# 31 40*40*1536 (Mixed-large)

   [[27, 17], 1, Concat, [1]],
# 32 160*160*384
   [-1, 3, C3, [384, False]],
# 33 160*160*384 (Mixed-small)

# Add Channels Attention
   [-1, 1, SE, [384]],
# 34 160*160*384 (Mixed-Atten-small)
   [20, 1, SE, [768]],
# 35 80*80*768 (Mixed-Atten-mid)
   [31, 1, SE, [1536]],
# 36 40*40*1536 (Mixed-Atten-large)

   [[34, 35, 36], 1, Detect, [nc, anchors]],  # Detect(P3, P4, P5)
  ]
